name: Validate 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  discover-modules:
    name: Discover Modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.find-modules.outputs.modules }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find modules with test scripts
        id: find-modules
        run: |
          MODULES=$(find modules -name "test.sh" -type f | sed 's|modules/||; s|/test/test.sh||' | jq -R -s -c 'split("\n")[:-1]')
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
          echo "Found modules: $MODULES"

  test-modules:
    name: Test ${{ matrix.module }} Module
    runs-on: ubuntu-latest
    needs: discover-modules
    strategy:
      matrix:
        module: ${{ fromJson(needs.discover-modules.outputs.modules) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install common dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl wget

      - name: Set up Go (for jplot module)
        if: matrix.module == 'jplot'
        uses: actions/setup-go@v4
        with:
            go-version: '1.23'

      - name: Install Docker and kubectl (for kind module)
        if: matrix.module == 'kind'
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Install Docker (for KIND)
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Install Python (for vegeta module)
        if: matrix.module == 'vegeta'
        run: |
          sudo apt-get install -y python3

      - name: Run module tests
        run: |
          chmod +x modules/${{ matrix.module }}/test/test.sh
          ./modules/${{ matrix.module }}/test/test.sh

  test-scenarios:
    name: Test Scenarios
    runs-on: ubuntu-latest
    needs: [test-modules]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

          # Install Docker (for KIND)
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo usermod -aG docker $USER

          # Install jq for JSON parsing
          sudo apt-get install -y jq

      - name: Test basic RPS scenario syntax
        run: |
          # Basic syntax check for the scenario script
          bash -n scenarios/basic_rps.sh
          echo "✓ basic_rps.sh syntax check passed"
    
      - name: Run basic RPS scenario
        run: |
          echo "Installing Kind"
          chmod +x ./modules/kind/install/install.sh

          echo "Creating Kind cluster"
          chmod +x ./modules/kind/run/run.sh
          ./modules/kind/run/run.sh

          echo "Running basic RPS scenario"
          chmod +x scenarios/basic_rps.sh
          ./scenarios/basic_rps.sh

          "chmod +x ./modules/vegeta/output/output.sh
          echo "Generating output"
          ./modules/vegeta/output/output.sh 

          echo "✓ Basic RPS scenario executed successfully"

  validate-structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate module structure
        run: |
          echo "Validating project structure..."
          
          # Find all directories in modules/
          echo "Discovering modules in modules/ directory..."
          
          # Check that all modules have required directories and files
          for module in $(find modules -maxdepth 1 -type d -not -name modules | sed 's|modules/||'); do
            echo "Checking module: $module"
            
            # Check install script exists
            if [[ ! -f "modules/$module/install/install.sh" ]]; then
              echo "ERROR: modules/$module/install/install.sh not found"
              exit 1
            fi
            
            # Check run script exists
            if [[ ! -f "modules/$module/run/run.sh" ]]; then
              echo "ERROR: modules/$module/run/run.sh not found"
              exit 1
            fi
            
            # Check test script exists
            if [[ ! -f "modules/$module/test/test.sh" ]]; then
              echo "ERROR: modules/$module/test/test.sh not found"
              exit 1
            fi
            
            # Check scripts are executable or can be made executable
            chmod +x "modules/$module/install/install.sh"
            chmod +x "modules/$module/run/run.sh"
            chmod +x "modules/$module/test/test.sh"
            
            echo "✓ Module $module structure validated"
          done
          